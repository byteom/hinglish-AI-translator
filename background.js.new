// Import our utility classes
importScripts('./utils/securityHelper.js');
importScripts('./utils/apiRequestManager.js');

// Initialize the API request manager for throttling and rate limiting
const apiRequestManager = new ApiRequestManager({
  throttleDelay: 500,
  maxRetries: 5,
  initialBackoffDelay: 1000
});

// Handle context menu for highlighted text translation
chrome.runtime.onInstalled.addListener(() => {
  chrome.contextMenus.create({
    id: "translateToHinglish",
    title: "Translate to Hinglish",
    contexts: ["selection"]
  });
  chrome.contextMenus.create({
    id: "explainInHinglish",
    title: "Explain in Hinglish",
    contexts: ["selection"]
  });
});

// Handle messages from content script and popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "translateText") {
    translateText(request.text)
      .then(sendResponse)
      .catch(error => {
        console.error("Translation error:", error);
        sendResponse("Translation error: " + error.message);
      });
    return true; // Required for async sendResponse
  }
  if (request.action === "explainText") {
    explainText(request.text)
      .then(sendResponse)
      .catch(error => {
        console.error("Explanation error:", error);
        sendResponse("Explanation error: " + error.message);
      });
    return true; // Required for async sendResponse
  }
  if (request.action === "getApiUsage") {
    // Get API usage statistics
    Promise.resolve({
      callCount: apiRequestManager.getApiCallCount(),
      lastStatus: apiRequestManager.getLastApiStatus()
    }).then(sendResponse);
    return true;
  }
  if (request.action === "resetApiCallCount") {
    apiRequestManager.resetApiCallCount()
      .then(() => sendResponse({ success: true }))
      .catch(error => {
        console.error("Error resetting API call count:", error);
        sendResponse({ success: false, error: error.message });
      });
    return true;
  }
});

chrome.contextMenus.onClicked.addListener(async (info, tab) => {
  if (info.menuItemId === "translateToHinglish" && info.selectionText) {
    try {
      // Show loading popup
      chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: showLoadingPopup,
        args: []
      });

      const translatedText = await translateText(info.selectionText);
      
      // Remove loading popup and show translation
      chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: showTranslationPopup,
        args: [info.selectionText, translatedText]
      });
    } catch (error) {
      console.error("Context menu translation error:", error);
      // Show error in popup
      chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: showErrorPopup,
        args: [error.message]
      });
    }
  } else if (info.menuItemId === "explainInHinglish" && info.selectionText) {
    try {
      // Show loading popup
      chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: showLoadingPopup,
        args: []
      });

      const explanation = await explainText(info.selectionText);
      
      // Remove loading popup and show explanation
      chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: showExplanationPopup,
        args: [info.selectionText, explanation]
      });
    } catch (error) {
      console.error("Context menu explanation error:", error);
      // Show error in popup
      chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: showErrorPopup,
        args: [error.message]
      });
    }
  }
});

// Function to get translation prompt based on style and level
function getTranslationPrompt(style, level) {
  const prompts = {
    hinglish: {
      balanced: "You are a translator that converts English text to Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound natural in Hinglish. Use a balanced mix of Hindi and English words. Only respond with the translated text, no explanations.",
      moreHindi: "You are a translator that converts English text to Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound natural in Hinglish. Use more Hindi words than English. Only respond with the translated text, no explanations.",
      moreEnglish: "You are a translator that converts English text to Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound natural in Hinglish. Use more English words than Hindi. Only respond with the translated text, no explanations."
    },
    hindi: {
      balanced: "You are a translator that converts English text to Hindi (Devanagari script). Keep the meaning exactly the same but make it sound natural in Hindi. Use a balanced mix of formal and colloquial Hindi. Only respond with the translated text, no explanations.",
      moreHindi: "You are a translator that converts English text to Hindi (Devanagari script). Keep the meaning exactly the same but make it sound natural in Hindi. Use more formal Hindi words. Only respond with the translated text, no explanations.",
      moreEnglish: "You are a translator that converts English text to Hindi (Devanagari script). Keep the meaning exactly the same but make it sound natural in Hindi. Use more colloquial Hindi words. Only respond with the translated text, no explanations."
    },
    roman: {
      balanced: "You are a translator that converts Hindi text to Romanized Hindi (Hindi written in English letters). Keep the meaning exactly the same but make it sound natural. Use a balanced mix of formal and colloquial words. Only respond with the translated text, no explanations.",
      moreHindi: "You are a translator that converts Hindi text to Romanized Hindi (Hindi written in English letters). Keep the meaning exactly the same but make it sound natural. Use more formal words. Only respond with the translated text, no explanations.",
      moreEnglish: "You are a translator that converts Hindi text to Romanized Hindi (Hindi written in English letters). Keep the meaning exactly the same but make it sound natural. Use more colloquial words. Only respond with the translated text, no explanations."
    },
    formal: {
      balanced: "You are a translator that converts English text to formal Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound professional and formal. Use a balanced mix of Hindi and English words. Only respond with the translated text, no explanations.",
      moreHindi: "You are a translator that converts English text to formal Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound professional and formal. Use more Hindi words than English. Only respond with the translated text, no explanations.",
      moreEnglish: "You are a translator that converts English text to formal Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound professional and formal. Use more English words than Hindi. Only respond with the translated text, no explanations."
    },
    casual: {
      balanced: "You are a translator that converts English text to casual Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound casual and conversational. Use a balanced mix of Hindi and English words. Only respond with the translated text, no explanations.",
      moreHindi: "You are a translator that converts English text to casual Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound casual and conversational. Use more Hindi words than English. Only respond with the translated text, no explanations.",
      moreEnglish: "You are a translator that converts English text to casual Hinglish (Hindi written in English letters). Keep the meaning exactly the same but make it sound casual and conversational. Use more English words than Hindi. Only respond with the translated text, no explanations."
    }
  };

  return prompts[style][level] || prompts.hinglish.balanced;
}

// Function to translate text using Groq API
async function translateText(text) {
  try {
    // Get API key using our security helper
    const apiKey = await SecurityHelper.getApiKey();
    if (!apiKey) {
      throw new Error("Please configure your API key first");
    }

    // Get translation settings
    const { translationSettings } = await chrome.storage.local.get(['translationSettings']);
    const style = translationSettings?.style || 'hinglish';
    const level = translationSettings?.level || 'balanced';
    const prompt = getTranslationPrompt(style, level);

    // Queue the API request with our request manager
    return await apiRequestManager.addRequest(async () => {
      const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          messages: [{
            role: "system",
            content: prompt
          }, {
            role: "user",
            content: text
          }],
          model: "meta-llama/llama-4-scout-17b-16e-instruct",
          temperature: 0.7,
          max_tokens: 1000
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        const error = new Error(errorData.error?.message || `API error: ${response.status}`);
        error.status = response.status;
        throw error;
      }
      
      const data = await response.json();
      const translatedText = data.choices[0].message.content.trim();
      
      if (!translatedText) {
        throw new Error("Empty translation received");
      }
      
      return translatedText;
    });
  } catch (error) {
    console.error("Translation error:", error);
    throw error;
  }
}

// Function to explain text using Groq API
async function explainText(text) {
  try {
    // Get API key using our security helper
    const apiKey = await SecurityHelper.getApiKey();
    if (!apiKey) {
      throw new Error("Please configure your API key first");
    }

    // Get translation settings
    const { translationSettings } = await chrome.storage.local.get(['translationSettings']);
    const style = translationSettings?.style || 'hinglish';
    const level = translationSettings?.level || 'balanced';
    const prompt = `You are an AI assistant that explains concepts in ${style === 'hindi' ? 'Hindi' : 'Hinglish'}. 
      Provide a clear and detailed explanation of the given text. 
      Make it easy to understand and use ${level === 'moreHindi' ? 'more Hindi words' : level === 'moreEnglish' ? 'more English words' : 'a balanced mix of Hindi and English words'}.
      Format your response in a clear, structured way with bullet points or short paragraphs.
      Only respond with the explanation, no additional text.`;

    // Queue the API request with our request manager
    return await apiRequestManager.addRequest(async () => {
      const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          messages: [{
            role: "system",
            content: prompt
          }, {
            role: "user",
            content: text
          }],
          model: "meta-llama/llama-4-scout-17b-16e-instruct",
          temperature: 0.7,
          max_tokens: 1000
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        const error = new Error(errorData.error?.message || `API error: ${response.status}`);
        error.status = response.status;
        throw error;
      }
      
      const data = await response.json();
      const explanation = data.choices[0].message.content.trim();
      
      if (!explanation) {
        throw new Error("Empty explanation received");
      }
      
      return explanation;
    });
  } catch (error) {
    console.error("Explanation error:", error);
    throw error;
  }
}

// Function to show loading popup
function showLoadingPopup() {
  const popup = document.createElement('div');
  popup.id = 'translationLoadingPopup';
  popup.style.position = 'fixed';
  popup.style.zIndex = '9999';
  popup.style.borderRadius = '8px';
  popup.style.padding = '20px';
  popup.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
  popup.style.maxWidth = '300px';
  popup.style.fontFamily = 'Arial, sans-serif';
  popup.style.fontSize = '14px';
  popup.style.top = '50%';
  popup.style.left = '50%';
  popup.style.transform = 'translate(-50%, -50%)';
  popup.style.backgroundColor = '#ffffff';
  popup.style.color = '#202124';
  popup.style.textAlign = 'center';

  // Check if dark mode is enabled
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    popup.style.backgroundColor = '#202124';
    popup.style.color = '#e8eaed';
  }
  
  const spinner = document.createElement('div');
  spinner.className = 'loading-spinner';
  spinner.style.borderRadius = '50%';
  spinner.style.width = '24px';
  spinner.style.height = '24px';
  spinner.style.margin = '0 auto 12px';
  spinner.style.border = '3px solid rgba(0, 0, 0, 0.1)';
  spinner.style.borderTopColor = '#1a73e8';
  spinner.style.animation = 'spin 1s linear infinite';
  
  const spinnerStyle = document.createElement('style');
  spinnerStyle.textContent = '@keyframes spin { to { transform: rotate(360deg); } }';
  document.head.appendChild(spinnerStyle);

  const message = document.createElement('div');
  message.textContent = 'Translating...';

  popup.appendChild(spinner);
  popup.appendChild(message);
  
  // Remove any existing popups before creating a new one
  const existingPopup = document.getElementById('translationLoadingPopup');
  if (existingPopup) {
    existingPopup.remove();
  }
  
  document.body.appendChild(popup);
}

// Function to show translation popup
function showTranslationPopup(original, translated) {
  // Remove loading popup if exists
  const loadingPopup = document.getElementById('translationLoadingPopup');
  if (loadingPopup) {
    loadingPopup.remove();
  }
  
  // Create translation popup
  const popup = document.createElement('div');
  popup.id = 'translationResultPopup';
  popup.style.position = 'fixed';
  popup.style.zIndex = '9999';
  popup.style.borderRadius = '8px';
  popup.style.padding = '20px';
  popup.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
  popup.style.maxWidth = '400px';
  popup.style.fontFamily = 'Arial, sans-serif';
  popup.style.fontSize = '14px';
  popup.style.top = '50%';
  popup.style.left = '50%';
  popup.style.transform = 'translate(-50%, -50%)';
  popup.style.backgroundColor = '#ffffff';
  popup.style.color = '#202124';
  
  // Check if dark mode is enabled
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    popup.style.backgroundColor = '#202124';
    popup.style.color = '#e8eaed';
  }

  const originalHeader = document.createElement('h3');
  originalHeader.textContent = 'Original:';
  originalHeader.style.margin = '0 0 5px 0';
  originalHeader.style.fontSize = '14px';
  originalHeader.style.fontWeight = 'normal';
  originalHeader.style.color = '#5f6368';
  
  const originalText = document.createElement('div');
  originalText.textContent = original;
  originalText.style.marginBottom = '15px';
  
  const translationHeader = document.createElement('h3');
  translationHeader.textContent = 'Translation:';
  translationHeader.style.margin = '0 0 5px 0';
  translationHeader.style.fontSize = '14px';
  translationHeader.style.fontWeight = 'normal';
  translationHeader.style.color = '#5f6368';
  
  const translationText = document.createElement('div');
  translationText.textContent = translated;
  translationText.style.marginBottom = '15px';
  
  const actions = document.createElement('div');
  actions.style.display = 'flex';
  actions.style.justifyContent = 'space-between';
  actions.style.marginTop = '15px';
  
  const copyButton = document.createElement('button');
  copyButton.textContent = 'Copy Translation';
  copyButton.style.padding = '8px 12px';
  copyButton.style.backgroundColor = '#1a73e8';
  copyButton.style.color = 'white';
  copyButton.style.border = 'none';
  copyButton.style.borderRadius = '4px';
  copyButton.style.cursor = 'pointer';
  copyButton.addEventListener('click', () => {
    navigator.clipboard.writeText(translated).then(() => {
      const originalText = copyButton.textContent;
      copyButton.textContent = 'Copied!';
      setTimeout(() => {
        copyButton.textContent = originalText;
      }, 2000);
    });
  });
  
  const closeButton = document.createElement('button');
  closeButton.textContent = 'Close';
  closeButton.style.padding = '8px 12px';
  closeButton.style.backgroundColor = 'transparent';
  closeButton.style.color = '#5f6368';
  closeButton.style.border = '1px solid #dadce0';
  closeButton.style.borderRadius = '4px';
  closeButton.style.cursor = 'pointer';
  closeButton.style.marginLeft = '10px';
  closeButton.addEventListener('click', () => {
    popup.remove();
  });
  
  actions.appendChild(copyButton);
  actions.appendChild(closeButton);
  
  popup.appendChild(originalHeader);
  popup.appendChild(originalText);
  popup.appendChild(translationHeader);
  popup.appendChild(translationText);
  popup.appendChild(actions);
  
  document.body.appendChild(popup);
}

// Function to show explanation popup
function showExplanationPopup(original, explanation) {
  // Remove loading popup if exists
  const loadingPopup = document.getElementById('translationLoadingPopup');
  if (loadingPopup) {
    loadingPopup.remove();
  }
  
  // Create explanation popup
  const popup = document.createElement('div');
  popup.id = 'explanationResultPopup';
  popup.style.position = 'fixed';
  popup.style.zIndex = '9999';
  popup.style.borderRadius = '8px';
  popup.style.padding = '20px';
  popup.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
  popup.style.maxWidth = '450px';
  popup.style.fontFamily = 'Arial, sans-serif';
  popup.style.fontSize = '14px';
  popup.style.top = '50%';
  popup.style.left = '50%';
  popup.style.transform = 'translate(-50%, -50%)';
  popup.style.backgroundColor = '#ffffff';
  popup.style.color = '#202124';
  popup.style.maxHeight = '70vh';
  popup.style.overflow = 'auto';
  
  // Check if dark mode is enabled
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    popup.style.backgroundColor = '#202124';
    popup.style.color = '#e8eaed';
  }

  const originalHeader = document.createElement('h3');
  originalHeader.textContent = 'Original Text:';
  originalHeader.style.margin = '0 0 5px 0';
  originalHeader.style.fontSize = '14px';
  originalHeader.style.fontWeight = 'normal';
  originalHeader.style.color = '#5f6368';
  
  const originalText = document.createElement('div');
  originalText.textContent = original;
  originalText.style.marginBottom = '15px';
  originalText.style.padding = '10px';
  originalText.style.backgroundColor = 'rgba(0,0,0,0.05)';
  originalText.style.borderRadius = '4px';
  
  const explanationHeader = document.createElement('h3');
  explanationHeader.textContent = 'Explanation:';
  explanationHeader.style.margin = '0 0 5px 0';
  explanationHeader.style.fontSize = '14px';
  explanationHeader.style.fontWeight = 'normal';
  explanationHeader.style.color = '#5f6368';
  
  const explanationText = document.createElement('div');
  explanationText.innerHTML = explanation.replace(/\n/g, '<br>');
  explanationText.style.marginBottom = '15px';
  explanationText.style.lineHeight = '1.5';
  
  const actions = document.createElement('div');
  actions.style.display = 'flex';
  actions.style.justifyContent = 'space-between';
  actions.style.marginTop = '15px';
  
  const copyButton = document.createElement('button');
  copyButton.textContent = 'Copy Explanation';
  copyButton.style.padding = '8px 12px';
  copyButton.style.backgroundColor = '#1a73e8';
  copyButton.style.color = 'white';
  copyButton.style.border = 'none';
  copyButton.style.borderRadius = '4px';
  copyButton.style.cursor = 'pointer';
  copyButton.addEventListener('click', () => {
    navigator.clipboard.writeText(explanation).then(() => {
      const originalText = copyButton.textContent;
      copyButton.textContent = 'Copied!';
      setTimeout(() => {
        copyButton.textContent = originalText;
      }, 2000);
    });
  });
  
  const closeButton = document.createElement('button');
  closeButton.textContent = 'Close';
  closeButton.style.padding = '8px 12px';
  closeButton.style.backgroundColor = 'transparent';
  closeButton.style.color = '#5f6368';
  closeButton.style.border = '1px solid #dadce0';
  closeButton.style.borderRadius = '4px';
  closeButton.style.cursor = 'pointer';
  closeButton.style.marginLeft = '10px';
  closeButton.addEventListener('click', () => {
    popup.remove();
  });
  
  actions.appendChild(copyButton);
  actions.appendChild(closeButton);
  
  popup.appendChild(originalHeader);
  popup.appendChild(originalText);
  popup.appendChild(explanationHeader);
  popup.appendChild(explanationText);
  popup.appendChild(actions);
  
  document.body.appendChild(popup);
}

// Function to show error popup
function showErrorPopup(errorMessage) {
  // Remove loading popup if exists
  const loadingPopup = document.getElementById('translationLoadingPopup');
  if (loadingPopup) {
    loadingPopup.remove();
  }
  
  // Create error popup
  const popup = document.createElement('div');
  popup.id = 'errorPopup';
  popup.style.position = 'fixed';
  popup.style.zIndex = '9999';
  popup.style.borderRadius = '8px';
  popup.style.padding = '20px';
  popup.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
  popup.style.maxWidth = '350px';
  popup.style.fontFamily = 'Arial, sans-serif';
  popup.style.fontSize = '14px';
  popup.style.top = '50%';
  popup.style.left = '50%';
  popup.style.transform = 'translate(-50%, -50%)';
  popup.style.backgroundColor = '#ffffff';
  popup.style.color = '#202124';
  popup.style.border = '1px solid #f28b82';
  
  // Check if dark mode is enabled
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    popup.style.backgroundColor = '#202124';
    popup.style.color = '#e8eaed';
  }
  
  const errorIcon = document.createElement('div');
  errorIcon.innerHTML = '&#9888;';
  errorIcon.style.fontSize = '24px';
  errorIcon.style.color = '#d93025';
  errorIcon.style.marginBottom = '10px';
  
  const errorTitle = document.createElement('h3');
  errorTitle.textContent = 'Error';
  errorTitle.style.margin = '0 0 10px 0';
  errorTitle.style.color = '#d93025';
  
  const errorText = document.createElement('div');
  errorText.textContent = errorMessage;
  errorText.style.marginBottom = '15px';
  
  const closeButton = document.createElement('button');
  closeButton.textContent = 'Close';
  closeButton.style.padding = '8px 12px';
  closeButton.style.backgroundColor = '#d93025';
  closeButton.style.color = 'white';
  closeButton.style.border = 'none';
  closeButton.style.borderRadius = '4px';
  closeButton.style.cursor = 'pointer';
  closeButton.style.width = '100%';
  closeButton.addEventListener('click', () => {
    popup.remove();
  });
  
  popup.appendChild(errorIcon);
  popup.appendChild(errorTitle);
  popup.appendChild(errorText);
  popup.appendChild(closeButton);
  
  document.body.appendChild(popup);
}
