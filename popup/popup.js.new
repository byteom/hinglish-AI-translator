// Use the background script for handling API keys to avoid CSP issues

document.addEventListener('DOMContentLoaded', async () => {
  // Get DOM elements
  const translateBtn = document.getElementById('translateBtn');
  const translateInput = document.getElementById('translateInput');
  const translateResult = document.getElementById('translateResult');
  const explainBtn = document.getElementById('explainBtn');
  const explainInput = document.getElementById('explainInput');
  const explainResult = document.getElementById('explainResult');
  const translatePageBtn = document.getElementById('translatePageBtn');
  const apiKeyStatus = document.getElementById('apiKeyStatus');
  const apiKeyContainer = document.getElementById('apiKeyContainer');
  const changeApiKeyBtn = document.getElementById('changeApiKey');
  const removeApiKeyBtn = document.getElementById('removeApiKey');
  const apiKeyInput = document.getElementById('apiKey');
  const saveApiKeyBtn = document.getElementById('saveApiKey');
  const toggleApiKeyBtn = document.getElementById('toggleApiKey');
  const translationStyle = document.getElementById('translationStyle');
  const languageLevel = document.getElementById('languageLevel');
  const translationMode = document.getElementById('translationMode');
  const sessionOnlyCheckbox = document.getElementById('sessionOnly');
  const apiUsageCount = document.getElementById('apiUsageCount');
  const apiUsageStatus = document.getElementById('apiUsageStatus');
  const resetApiCountBtn = document.getElementById('resetApiCount');

  // Check if API key exists
  let apiKeyExists = false;
  chrome.runtime.sendMessage({action: "checkApiKey"}, (response) => {
    apiKeyExists = response.hasKey;
    if (apiKeyExists) {
      apiKeyStatus.textContent = "API key configured";
      apiKeyStatus.style.backgroundColor = "#0b8043";
    } else {
      apiKeyStatus.textContent = "No API key configured";
      apiKeyStatus.style.backgroundColor = "#d93025";
    }
  });

  // Load API usage stats
  function updateApiUsageStats() {
    chrome.runtime.sendMessage({action: "getApiUsage"}, (stats) => {
      if (stats && apiUsageCount) {
        apiUsageCount.textContent = `${stats.callCount || 0} calls`;
        
        if (stats.lastStatus && apiUsageStatus) {
          let statusColor = "#1a73e8"; // Default blue
          if (stats.lastStatus === "success") statusColor = "#0b8043"; // Green
          else if (stats.lastStatus === "failed") statusColor = "#d93025"; // Red
          else if (stats.lastStatus === "retrying") statusColor = "#f29900"; // Orange
          
          apiUsageStatus.textContent = stats.lastStatus || "Unknown";
          apiUsageStatus.style.color = statusColor;
        }
      }
    });
  }
  
  // Initialize UI and load saved settings
  async function initializeUI() {
    // Load translation settings
    const settings = await chrome.storage.local.get([
      'translationStyle', 
      'languageLevel', 
      'translationMode',
      'sessionOnly'
    ]);
    
    if (settings.translationStyle && translationStyle) {
      translationStyle.value = settings.translationStyle;
    }
    
    if (settings.languageLevel && languageLevel) {
      languageLevel.value = settings.languageLevel;
    }
    
    if (settings.translationMode && translationMode) {
      translationMode.value = settings.translationMode;
    }
    
    if (settings.sessionOnly !== undefined && sessionOnlyCheckbox) {
      sessionOnlyCheckbox.checked = settings.sessionOnly;
    }
    
    updateApiUsageStats();
  }
  
  // Call initialization
  initializeUI();

  // Translation button click handler
  if (translateBtn) {
    translateBtn.addEventListener('click', async () => {
      const text = translateInput.value.trim();
      if (!text) return;
      
      translateBtn.disabled = true;
      translateResult.textContent = "Translating...";
      
      try {
        chrome.runtime.sendMessage(
          {action: "translateText", text: text},
          (response) => {
            translateBtn.disabled = false;
            
            if (typeof response === 'string') {
              translateResult.textContent = response;
              // Update API usage stats after successful call
              updateApiUsageStats();
            } else {
              translateResult.textContent = "Error: Could not translate text";
            }
          }
        );
      } catch (error) {
        translateBtn.disabled = false;
        translateResult.textContent = "Error: " + error.message;
      }
    });
  }

  // Explain button click handler
  if (explainBtn) {
    explainBtn.addEventListener('click', async () => {
      const text = explainInput.value.trim();
      if (!text) return;
      
      explainBtn.disabled = true;
      explainResult.textContent = "Generating explanation...";
      
      try {
        chrome.runtime.sendMessage(
          {action: "explainText", text: text},
          (response) => {
            explainBtn.disabled = false;
            
            if (typeof response === 'string') {
              explainResult.textContent = response;
              // Update API usage stats after successful call
              updateApiUsageStats();
            } else {
              explainResult.textContent = "Error: Could not generate explanation";
            }
          }
        );
      } catch (error) {
        explainBtn.disabled = false;
        explainResult.textContent = "Error: " + error.message;
      }
    });
  }

  // Translate page button click handler
  if (translatePageBtn) {
    translatePageBtn.addEventListener('click', async () => {
      try {
        const [tab] = await chrome.tabs.query({active: true, currentWindow: true});
        
        if (tab) {
          translatePageBtn.textContent = "Translating...";
          translatePageBtn.disabled = true;
          
          // Send message to content script
          await chrome.tabs.sendMessage(tab.id, {action: "translatePage"});
          
          // Update UI
          setTimeout(() => {
            translatePageBtn.textContent = "Translate This Page";
            translatePageBtn.disabled = false;
            // Update API usage stats
            updateApiUsageStats();
          }, 1000);
        }
      } catch (error) {
        console.error("Error translating page:", error);
        translatePageBtn.textContent = "Translate This Page";
        translatePageBtn.disabled = false;
      }
    });
  }

  // Change API key button click handler
  if (changeApiKeyBtn) {
    changeApiKeyBtn.addEventListener('click', () => {
      apiKeyContainer.style.display = 'block';
    });
  }

  // Remove API key button click handler
  if (removeApiKeyBtn) {
    removeApiKeyBtn.addEventListener('click', async () => {
      if (confirm('Are you sure you want to remove your API key?')) {
        chrome.runtime.sendMessage({action: "clearApiKey"}, (response) => {
          if (response.success) {
            apiKeyStatus.textContent = "No API key configured";
            apiKeyStatus.style.backgroundColor = "#d93025";
            apiKeyContainer.style.display = 'block';
          } else {
            alert("Failed to remove API key: " + (response.error || "Unknown error"));
          }
        });
      }
    });
  }

  // Save API key button click handler
  if (saveApiKeyBtn) {
    saveApiKeyBtn.addEventListener('click', async () => {
      const apiKey = apiKeyInput.value.trim();
      
      if (!apiKey) {
        alert("Please enter an API key");
        return;
      }
      
      // Simple validation
      if (!apiKey.startsWith('gsk_')) {
        alert("This doesn't look like a valid Groq API key. It should start with 'gsk_'");
        return;
      }
      
      saveApiKeyBtn.textContent = "Saving...";
      saveApiKeyBtn.disabled = true;
      
      const sessionOnly = sessionOnlyCheckbox.checked;
      
      try {
        chrome.runtime.sendMessage(
          {
            action: "saveApiKey", 
            apiKey: apiKey, 
            sessionOnly: sessionOnly
          }, 
          (response) => {
            saveApiKeyBtn.textContent = "Save API Key";
            saveApiKeyBtn.disabled = false;
            
            if (response.success) {
              apiKeyStatus.textContent = "API key configured";
              apiKeyStatus.style.backgroundColor = "#0b8043";
              apiKeyContainer.style.display = 'none';
              apiKeyInput.value = '';
            } else {
              alert("Failed to save API key: " + (response.error || "Unknown error"));
            }
          }
        );
      } catch (error) {
        saveApiKeyBtn.textContent = "Save API Key";
        saveApiKeyBtn.disabled = false;
        alert("Error saving API key: " + error.message);
      }
    });
  }

  // Toggle API key visibility button click handler
  if (toggleApiKeyBtn) {
    toggleApiKeyBtn.addEventListener('click', () => {
      if (apiKeyInput.type === "password") {
        apiKeyInput.type = "text";
        toggleApiKeyBtn.textContent = "🙈";
      } else {
        apiKeyInput.type = "password";
        toggleApiKeyBtn.textContent = "👁️";
      }
    });
  }

  // Save translation settings when they change
  if (translationStyle) {
    translationStyle.addEventListener('change', async () => {
      await chrome.storage.local.set({
        'translationStyle': translationStyle.value
      });
    });
  }

  if (languageLevel) {
    languageLevel.addEventListener('change', async () => {
      await chrome.storage.local.set({
        'languageLevel': languageLevel.value
      });
    });
  }

  if (translationMode) {
    translationMode.addEventListener('change', async () => {
      await chrome.storage.local.set({
        'translationMode': translationMode.value
      });
    });
  }
  
  if (sessionOnlyCheckbox) {
    sessionOnlyCheckbox.addEventListener('change', async () => {
      await chrome.storage.local.set({
        'sessionOnly': sessionOnlyCheckbox.checked
      });
    });
  }

  // Reset API counter
  if (resetApiCountBtn) {
    resetApiCountBtn.addEventListener('click', () => {
      if (confirm("Reset API call counter to zero?")) {
        chrome.runtime.sendMessage({action: "resetApiCount"}, () => {
          updateApiUsageStats();
        });
      }
    });
  }
});
